/*
 * Created on 13 Feb 2016 ( Time 21:09:53 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.prorata.api.service;

import java.util.List;

import com.prorata.api.model.ProrataUserEntity;

/**
 * Business Service Interface for {@link ProrataUserEntity
 * ProrataUserEntity}.
 */
public interface ProrataUserService
{
	
	/**
	 * Loads an entity from the database using its Primary Key
	 * 
	 * @param prorataUserId
	 * @return entity
	 */
	ProrataUserEntity findById(Integer prorataUserId);
	
	/**
	 * Loads all entities.
	 * 
	 * @return all entities
	 */
	List<ProrataUserEntity> findAll();
	
	/**
	 * Updates the given entity in the database. The user supplied must have the
	 * correct email address and password, allowing it to pass a credential
	 * check. If the check is passed, the user will be persisted using the JPA
	 * save method, resulting in a database insert due to the checked entity's
	 * inclusion of an ID value. If the check fails, an IllegalArgumentException
	 * is thrown.
	 * 
	 * @param entity
	 * @return
	 */
	ProrataUserEntity update(ProrataUserEntity entity);
	
	/**
	 * Creates the given entity in the database
	 * 
	 * @param entity
	 * @return
	 */
	ProrataUserEntity create(ProrataUserEntity entity);
	
	/**
	 * Returns a {@link com.prorata.model.ProrataUser ProrataUser} if one with
	 * matching credentials can be found. This service will recover by email and
	 * actively check whether or not the password matches before returning the
	 * user.
	 * 
	 * @param emailHash
	 *         An encoded representation of the 
	 *         {@link ProrataUserEntity#email}
	 *         of the ProrataUser to be retrieved.
	 * @param passwordHash
	 *         An encoded representation of the 
	 *         {@link ProrataUserEntity#password}
	 *         of the ProrataUser to be retrieved.
	 * @return The {@link ProrataUserEntity
	 *         ProrataUserEntity} containing the user data requested.
	 */
	ProrataUserEntity signIn(String emailHash, String passwordHash);
	
	/**
	 * Will remove the supplied {@link ProrataUserEntity
	 * ProrataUserEntity} from the database.
	 * 
	 * @param credentials
	 *            A string map containing the email and password of the user to
	 *            be deleted.
	 * @return the state of the operation.
	 */
	String delete(ProrataUserEntity credentials);
	
}
